/*** https://www.acmicpc.net/problem/11399
 * 인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다.
 * 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분
 *
 * 사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다.
 * [e.g.]
 * 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자.
 * [1, 2, 3, 4, 5] 순서로 줄을 선다면,
 * 1번 사람은 3분만에 돈을 뽑을 수 있다.
 * 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = 4분이 걸리게 된다.
 * 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 총 3+1+4 = 8분이 필요하게 된다.
 * 4번 사람은 3+1+4+3 = 11분, 5번 사람은 3+1+4+3+2 = 13분이 걸리게 된다.
 * 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = 39분이 된다.
 *
 * 줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면,
 * 2번 사람은 1분만에,
 * 5번 사람은 1+2 = 3분,
 * 1번 사람은 1+2+3 = 6분,
 * 4번 사람은 1+2+3+3 = 9분,
 * 3번 사람은 1+2+3+3+4 = 13분이 걸리게 된다.
 * 각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = 32분이다.
 * 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다.
 *
 * 줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때,
 * 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램
 *
 * [cf.]
 * 첫째 줄에 사람의 수 N
 * 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi
 *
 * [풀이]
 * 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 계산한다.
 * [문제 해결 아이디어] 시간이 적게 소요되는 사람부터 처리할 때, 필요한 시간의 합이 최소가 된다.
 * 따라서 오름차순 정렬 이후에 누적 합을 계산하여 해결할 수 있다.
 */
let fs = require('fs')
let input = fs.readFileSync('/dev/stdin').toString().split('\n')

let n = Number(input[0]) // 사람의 수
let arr = input[1].split(' ').map(Number) // 모든 처리 시간 입력받기

// 오름차순 정렬
arr.sort((a, b) => a - b)

let answer = 0
let summary = 0

for (let i = 0; i < n; i++) {
  summary += arr[i] // i번째 사람이 기다린 총 시간
  answer += summary // 지금까지 소요된 총 시간
}

console.log(answer)
