/*** DFS와 BFS
 * 탐색(Search)이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미한다.
 * 대표적인 그래프 탐색 알고리즘으로는 DFS와 BFS가 있다.
 * DFS와 BFS는 코딩 테스트에서 매우 자주 등장하는 유형이므로 반드시 숙지할 필요가 있다
 */

/*** 그래프의 표현
 * 일반적으로 JavaScript로 DFS와 같은 그래프 문제를 해결할 때는?
 * 2차원 배열(리스트)로 그래프를 표현한다.
 * 인접 리스트 표현 방식의 예시는 다음과 같다
 */

/*** 너비 우선 탐색(BFS)이란?
 * 그래프 혹은 트리에서 모든 노드를 한 번씩 탐색하기 위한 기본적인 방법이다.
 * [완전 탐색]을 수행하기 위해 사용할 수 있는 방법 중 하나다.
 * (모든 간선의 길이가 동일할 때) 최단 거리를 탐색하기 위한 목적으로 사용할 수 있다.
 * 큐(queue) 자료구조를 사용한다.
 * 기본적으로 DFS는 스택, BFS는 큐를 사용한다
 */

/*** 너비 우선 탐색(BFS) 기본 동작 방식
 * 1. 시작 노드를 큐에 넣고 [방문 처리]한다.
 * 2. 큐에서 원소를 꺼내어 방문하지 않은 인접 노드가 있는지 확인한다.
 *  - 있다면, 방문하지 않은 인접 노드를 큐에 모두 삽입하고 [방문 처리]한다.
 * 3. 2번 과정을 더 이상 반복할 수 없을 때까지 반복한다
 */

/*** 너비 우선 탐색(BFS) 사용 예시
 * 너비 우선 탐색이 사용되는 예시로는 다음과 같은 상황들이 있다.
 * 1. 간선의 비용이 동일한 상황에서 [최단 거리] 문제를 해결하는 경우
 * 2. 완전 탐색을 위해 사용한 DFS 솔루션이 메모리/시간 초과를 받아 BFS로 재시도하는 경우
 *    -> DFS와 BFS 모두 그래프 탐색 목적으로 사용할 수 있으나, 구현이 익숙하다면 BFS를 추천한다.
 *
 * • 코딩 테스트에서 DFS로 해결할 수 있는 문제는 BFS로도 해결할 수 있는 경우가 많다.
 *   -> DFS는 일반적인 최단 거리 문제를 해결할 수 없다.
 */

/*** 너비 우선 탐색(BFS)과 최단 경로
 * BFS는 간선의 비용이 동일할 때 [최단 거리] 문제를 해결하기 위해 사용 가능하다.
 * BFS는 다익스트라 최단 경로 알고리즘과 유사한 특징이 있다.
 * -> 다익스트라는 간선의 비용이 서로 다를 수 있을 때 사용 가능하다.
 *
 * 1) 다익스트라 알고리즘은 일반 큐 대신에 우선순위 큐를 사용한다.
 * 2) 다익스트라는 특정 노드에 대하여 [최단 거리] 값이 갱신될 수 있다. (더 짧은 경로를 찾는 경우)
 */
