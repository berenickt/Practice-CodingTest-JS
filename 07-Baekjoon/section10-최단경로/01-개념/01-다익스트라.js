/*** 그래프의 표현
 * 일반적으로 JavaScript로 그래프 관련 문제를 해결할 때는?
 * 2차원 배열(리스트)로 그래프를 표현한다
 */

/*** 최단 경로 문제란?
 * 최단 경로 알고리즘은 가장 짧은 경로를 찾는 알고리즘을 의미한다.
 *
 * 다양한 문제 상황
 * - 한 지점에서 다른 한 지점까지의 최단 경로
 * - 한 지점에서 다른 모든 지점까지의 최단 경로 → 다익스트라 알고리즘
 * - 모든 지점에서 다른 모든 지점까지의 최단 경로 → 플로이드 워셜 알고리즘
 *
 * 각 지점은 그래프에서 노드로 표현
 * 지점 간 연결된 도로는 그래프에서 간선으로 표현
 */

/*** 최단 경로 알고리즘 동작 과정
 * 최단 거리 테이블은 각 노드에 대한 현재까지의 최단 거리 정보를 가진다.
 * 처리 과정에서 더 짧은 경로를 찾으면 더 짧은 경로로 값을 갱신한다.
 */

/*** 다익스트라 최단 경로 알고리즘
 * 특정한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산한다.
 * 다익스트라 최단 경로 알고리즘은 음의 간선이 없을 때 정상적으로 동작한다.
 * - 현실 세계의 도로(간선)는 음의 간선으로 표현되지 않는다.
 * - 음의 간선이 포함될 때는 벨만 포드(Bellman-Ford) 알고리즘을 사용할 수 있다.
 * 다익스트라 최단 경로 알고리즘은 그리디 알고리즘으로 분류된다.
 * - 매 상황에서 가장 비용이 적은 노드를 선택해 임의의 과정을 반복한다
 */

/*** 다익스트라 최단 경로 알고리즘 동작 과정
 * 1. 출발 노드를 설정한다.
 * 2. 최단 거리 테이블을 초기화한다.
 * 3. 방문하지 않은 노드 중에서 `최단 거리가 가장 짧은 노드`를 선택한다.
 * 4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.
 *    → 최단 거리 테이블을 직접 갱신하지 않고, 우선순위 큐에 삽입하는 방식을 사용할 수도 있다.
 * 5. 위 과정에서 3번과 4번을 반복한다.
 */

/*** 다익스트라 최단 경로 알고리즘
 * 다익스트라 최단 경로 알고리즘은 "그리디 알고리즘" 유형에 속한다.
 * -> 매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택해 임의의 과정을 반복한다.
 *
 * 단계를 거치며 `한 번 처리된 노드의 최단 거리는 고정`되어 더 이상 바뀌지 않는다.
 * -  한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해할 수 있다.
 * 다익스트라 알고리즘을 수행한 뒤에 테이블에 각 노드까지의 최단 거리 정보가 저장된다.
 * 완전한 형태의 최단 경로를 구하려면 소스코드에 추가적인 기능을 더 넣어야 한다
 */

/*** 우선순위 큐(Priority Queue)
 * 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조이다.
 * 예를 들어 여러 개의 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내서
 * 확인해야 하는 경우에 우선순위 큐를 이용할 수 있다.
 * Python, C++, Java를 포함한 대부분의 프로그래밍 언어에서 표준 라이브러리 형태로 지원한다.
 *
 * 스택(Stack)                 : 가장 나중에 삽입된 데이터
 * 큐(Queue)                   : 가장 먼저 삽입된 데이터
 * 우선순위 큐(Priority Queue) : 가장 우선순위가 높은 데이터
 */

/*** 힙(Heap)
 * 우선순위 큐(Priority Queue)를 구현하기 위해 사용하는 자료구조 중 하나다.
 * 최소 힙(Min Heap)과 최대 힙(Max Heap)이 있다.
 * 다익스트라 최단 경로 알고리즘을 포함해 다양한 알고리즘에서 사용된다.
 *
 * 우선순위 큐 구현 방식 | 삽입 시간 복잡도 | 삭제 시간 복잡도
 * 1. 배열(리스트)      | 𝑂(1)            | 𝑂(𝑁)
 * 2. 힙(Heap)         |   𝑂(𝑙𝑜𝑔𝑁)       | 𝑂(𝑙𝑜𝑔N)
 */

/*** JavaScript의 힙(Heap) 라이브러리
 * JavaScript는 기본적으로 우선순위 큐를 라이브러리로 제공하지 않는다.
 * 최단 경로 알고리즘 등에서 힙(heap)이 필요한 경우 별도의 라이브러리를 사용해야 한다.
 *
 * https://github.com/janogonzalez/priorityqueuejs
 * index.js 소스 코드를 가져온 뒤에 다음과 같이 사용할 수 있다
 */
// 최대힙(Max Heap)
let pq = new PriorityQueue(function (a, b) {
  return a.cash - b.cash
})
pq.enq({ cash: 250, name: 'Doohyun Kim' })
pq.enq({ cash: 300, name: 'Gildong Hong' })
pq.enq({ cash: 150, name: 'Minchul Han' })

console.log(pq.size()) // 3
console.log(pq.deq()) // {cash: 300, name: 'Gildong Hong'}
console.log(pq.peek()) // {cash: 250, name: 'Doohyun Kim'}
console.log(pq.size()) // 2

/*** 다익스트라 최단 경로 알고리즘의 특징
 * 단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다.
 * -> 이를 위해 힙(Heap) 자료구조를 이용한다.
 * -> 다시 말해, 현재 상황에서 가장 가까운 노드를 저장해 놓기 위해서 힙 자료구조를 이용한다.
 *
 * 현재의 최단 거리가 가장 짧은 노드를 선택해야 하므로 최소 힙을 사용한다
 */
