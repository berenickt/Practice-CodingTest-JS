/*** https://www.acmicpc.net/problem/18353
 * 𝑁명의 병사가 무작위로 나열되어 있다.
 * 각 병사는 특정한 값의 전투력을 보유하고 있다.
 * 병사를 배치할 때는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치를 하고자 한다.
 * 다시 말해 앞쪽에 있는 병사의 전투력이 항상 뒤쪽에 있는 병사보다 높아야 합니다.
 * 또한 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용한다.
 * 결과적으로 남아 있는 병사의 수가 최대가 되도록 하는 것이 목표다.
 *
 * 예를 들어 하나의 수열 𝑎𝑟𝑟𝑎𝑦 = {4, 2, 5, 8, 4, 11,15}이 있다고 하자.
 * 이 수열의 가장 긴 증가하는 부분 수열은 {4, 5, 8, 11,15}이다.
 * 이 문제의 기본 아이디어는 가장 긴 증가하는
 * 부분 수열(Longest Increasing Subsequence, LIS)로 알려진
 * 전형적인 다이나믹 프로그래밍 문제의 아이디어와 같다.
 *
 * 본 문제는 가장 긴 감소하는 부분 수열을 찾는 문제로 치환할 수 있으므로,
 * LIS 알고리즘을 조금 수정하여 적용함으로써 정답을 도출할 수 있다
 *
 * 가장 먼저 입력 받은 병사 정보의 순서를 뒤집는다.
 * 가장 긴 증가하는 부분 수열 (LIS) 알고리즘을 수행하여 정답을 도출할 수 있다
 */
// readline 모듈보다는 fs를 이용해 파일 전체를 읽기
let file = require('fs').readFileSync('/dev/stdin')
let input = file.toString().split('\n')

let n = Number(input[0])
let arr = input[1].split(' ').map(Number)

// 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환
arr.reverse()

// 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화
dp = new Array(n).fill(1)

// 가장 긴 증가하는 부분 수열(LIS) 알고리즘 수행
for (let i = 1; i < n; i++) {
  for (let j = 0; j < i; j++) {
    if (arr[j] < arr[i]) {
      dp[i] = Math.max(dp[i], dp[j] + 1)
    }
  }
}

// 열외해야 하는 병사의 최소 수를 출력
console.log(n - Math.max(...dp))
