/*** 음수 간선이 포함된 상황에서의 최단 거리 문제
 * 음수 간선이 포함된다면 어떻게 문제를 해결할 수 있을까?
 * 아래 그래프에서는 음수 간선이 포함되어 있다.
 * 하지만 여전히 최단 거리를 계산할 수 있다
 */

/*** 벨만 포드 최단 경로 알고리즘
 * 음수 간선에 관하여 최단 경로 문제는 다음과 같이 분류할 수 있다.
 * 1) 모든 간선이 양수인 경우
 * 2) 음수 간선이 있는 경우
 * 	2-1) 음수 순환은 없는 경우
 * 	2-2) 음수 순환이 있는 경우
 * 벨만 포드 최단 경로 알고리즘은 음의 간선이 포함된 상황에서도 사용할 수 있다.
 * 또한 음수 순환을 감지할 수 있다.
 * 벨만 포드의 기본 시간 복잡도는 𝑂 𝑉𝐸 로 다익스트라 알고리즘에 비해 느리다.
 * → 기본적으로 동작 과정에서 다익스트라 알고리즘의 “최적의 해”를 항상 포함한다
 */

/*** 벨만 포드 최단 경로 알고리즘 과정
 * 벨만 포드 알고리즘은 다음과 같다.
 * 1. 출발 노드를 설정한다.
 * 2. 최단 거리 테이블을 초기화한다.
 * 3. 다음의 과정을 𝑁 − 1번 반복한다.
 * 	3-1. 전체 간선 𝐸개를 하나씩 확인한다.
 * 	3-2. 각 간선을 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.
 * 만약 음수 순환이 발생하는지 체크하고 싶다면 3번의 과정을 한 번 더 수행한다.
 * 이때 최단 거리 테이블이 갱신된다면 음수 순환이 존재하는 것이다
 */

/*** 벨만 포드 알고리즘 VS 다익스트라 알고리즘
 * ** 다익스트라 알고리즘
 * 매번 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다.
 * 음수 간선이 없다면 최적의 해를 찾을 수 있다.
 *
 * ** 벨만 포드 알고리즘
 * 매번 모든 간선을 전부 확인한다.
 * 따라서 다익스트라 알고리즘에서의 최적의 해를 항상 포함한다.
 * 다익스트라 알고리즘에 비해서 시간이 오래 걸리지만 음수 순환을 탐지할 수 있다
 */
