/*** https://www.acmicpc.net/problem/13305
 * 어떤 나라에 N개의 도시가 있다. 이 도시들은 일직선 도로 위에 있다.
 * 편의상 일직선을 수평 방향으로 두자. 제일 왼쪽의 도시에서 제일 오른쪽의 도시로 자동차를 이용하여 이동하려고 한다.
 * 인접한 두 도시 사이의 도로들은 서로 길이가 다를 수 있다. 도로 길이의 단위는 km를 사용한다.
 *
 * 처음 출발할 때 자동차에는 기름이 없어서 주유소에서 기름을 넣고 출발하여야 한다.
 * 기름통의 크기는 무제한이어서 얼마든지 많은 기름을 넣을 수 있다. 도로를 이용하여 이동할 때 1km마다 1리터의 기름을 사용한다.
 * 각 도시에는 단 하나의 주유소가 있으며, 도시 마다 주유소의 리터당 가격은 다를 수 있다.
 * 가격의 단위는 원을 사용한다.
 *
 * [e.g.]
 * 이 나라에 다음 그림처럼 4개의 도시가 있다고 하자.
 * 원 안에 있는 숫자는 그 도시에 있는 주유소의 리터당 가격이다. 도로 위에 있는 숫자는 도로의 길이를 표시한 것이다.
 *
 * 각 도시에 있는 주유소의 기름 가격과, 각 도시를 연결하는 도로의 길이를 입력으로 받아서,
 * @returns  제일 왼쪽 도시에서 제일 오른쪽 도시로 이동하는 최소의 비용
 *
 * [cf.]
 * 첫 번째 줄에는 도시의 개수를 나타내는 정수 N
 * 다음 줄에는 인접한 두 도시를 연결하는 도로의 길이가 제일 왼쪽 도로부터 N-1개의 자연수
 * 다음 줄에는 주유소의 리터당 가격이 제일 왼쪽 도시부터 순서대로 N개의 자연수
 *
 * [핵심 아이디어]
 * 주유 비용을 비오름차순으로 변경
 * 자기보다 뒤에 있는 비싼 주요소에 대해서 미리 결제하는 것으로 이해
 */
let fs = require('fs')
let input = fs.readFileSync('/dev/stdin').toString().split('\n')

let n = Number(input[0])
let dist = input[1].split(' ').map(Number)
let cost = input[2].split(' ').map(Number)

// **** 주유 비용(cost) 배열의 값을 비오름차순이 되도록 변환
// [5, 2, 4, 1] -> [5, 2, 2, 1]
let minCost = cost[0]
for (let i = 0; i < n; i++) {
  minCost = Math.min(minCost, cost[i])
  cost[i] = minCost
}

// **** 도로당 이동 비용의 합 계산
// JS에서 큰 정수를 처리할 때는 BigInt 사용
let answer = BigInt(0)
for (let i = 0; i < n - 1; i++) {
  answer += BigInt(dist[i]) * BigInt(cost[i])
}

console.log(String(answer)) // 뒤에 붙는 'n' 제거
