/*** https://www.acmicpc.net/problem/19939
 * K개의 팀이 박 터트리기 게임을 한다.
 * 각 팀은 하나의 바구니를 가지고 있고, 바구니에 들어있는 공을 던져서 자기 팀의 박을 터트려야 한다.
 * 게임을 준비하기 위해서, N개의 공을 K개의 바구니에 나눠 담아야 한다.
 * 이때, 게임의 재미를 위해서 바구니에 담기는 공의 개수를 모두 다르게 하고 싶다.
 *
 * 즉, N개의 공을 K개의 바구니에 빠짐없이 나누어 담는데,
 * 각 바구니에는 1개 이상의 공이 있어야 하고, 바구니에 담긴 공의 개수가 모두 달라야 한다.
 * 게임의 불공정함을 줄이기 위해서,
 * 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이가 최소가 되도록 담을 것이다.
 *
 * 공을 바구니에 나눠 담기 위한 규칙을 정리하면 다음과 같다.
 * 1) N개의 공을 K개의 바구니에 빠짐없이 나누어 담는다.
 * 2) 각 바구니에는 1개 이상의 공이 들어 있어야 한다.
 * 3) 각 바구니에 담긴 공의 개수는 모두 달라야 한다.
 * 4) 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이가 최소가 되어야 한다.
 *
 * 위의 규칙을 모두 만족하며 N개의 공을 K개의 바구니에 나눠 담을 때,
 * 나눠 담을 수 있는지 여부를 결정하고, 담을 수 있는 경우에는
 * 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이를 계산해서 출력하는 프로그램
 * 나눠 담을 수 없는 경우에는 -1을 출력
 *
 * [cf.]
 * 첫 번째 줄에 공의 개수를 나타내는 N과 팀의 수를 나타내는 정수 K가 주어짐
 *
 * [해결 아이디어]
 * 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이가 최소가 되려면?
 * 공의 개수가 최대한 연속적이게 만들면 된다.
 * e.g. N=15, K=5이면, 각 바구니에 공의 개수로 1, 2, 3, 4, 5를 가질 수 있다.
 * e.g. N=16, K=5이면, 각 바구니에 공의 개수로 1, 2, 3, 4, 6를 가질 수 있다.
 * e.g. N=17, K=5이면, 각 바구니에 공의 개수로 1, 2, 3, 5, 6를 가질 수 있다.
 * 항상 정답은 K-1 혹은 K인 것을 알 수 있다.
 * 이 경우 N이 충분히 크지 않으면, 목표에 만족할 수 없다.
 * N이 충분히 커야지만 목표를 만족할 수 있다.
 */
let fs = require('fs')
let input = fs.readFileSync('/dev/stdin').toString().split('\n')

// 공의 개수 N과 바구니의 개수 K를 입력받기
let n = Number(input[0].split(' ')[0])
let k = Number(input[0].split(' ')[1])

let summary = 0 // 1부터 K까지의 합

for (let i = 1; i < k + 1; i++) {
  summary += i
}

// 공의 개수가 부족한 경우
if (summary > n) console.log(-1)
// 공의 개수가 충분한 경우
else {
  n -= summary
  if (n % k == 0) console.log(k - 1) // K개에 각각 1씩 더하기
  else console.log(k)
}
