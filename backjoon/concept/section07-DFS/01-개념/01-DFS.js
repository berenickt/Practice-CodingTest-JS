/*** DFS와 BFS
 * 탐색(Search)이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미한다.
 * 대표적인 그래프 탐색 알고리즘으로는 DFS와 BFS가 있다.
 * DFS와 BFS는 코딩 테스트에서 매우 자주 등장하는 유형이므로 반드시 숙지할 필요가 있다
 */

/*** 그래프의 표현
 * 일반적으로 JavaScript로 DFS와 같은 그래프 문제를 해결할 때는?
 * 2차원 배열(리스트)로 그래프를 표현한다.
 * 인접 리스트 표현 방식의 예시는 다음과 같다
 */

/*** 깊이 우선 탐색(DFS)이란?
 * 그래프 혹은 트리에서 모든 노드를 한 번씩 탐색하기 위한 기본적인 방법이다.
 * [완전 탐색]을 수행하기 위해 사용할 수 있는 가장 간단한 방법 중 하나다.
 * 스택(stack) 자료구조를 사용한다.
 */

/*** 깊이 우선 탐색(DFS) 기본 동작 방식
 * 1. 시작 노드를 스택에 넣고 [방문 처리]한다.
 * 2. 스택에 마지막으로 들어 온 노드에 방문하지 않은 인접 노드가 있는지 확인한다.
 *    - 있다면, 방문하지 않은 인접 노드를 스택에 삽입하고 [방문 처리]한다.
 *    - 없다면, 현재 노드(스택에 마지막으로 들어 온 노드)를 스택에서 추출한다.
 * 3. 2번 과정을 더 이상 반복할 수 없을 때까지 반복한다
 */

/*** 깊이 우선 탐색(DFS) 구현 특징
 * DFS를 실제로 구현할 때는 스택 혹은 재귀 함수를 이용한다.
 * -> 재귀 함수는 내부적으로 스택과 동일한 동작 원리를 가지므로, 구현의 편리성이 존재한다.
 * 완전 탐색을 목적으로 하는 경우, 탐색 속도가 BFS보다 느린 경향이 있다.
 * 그럼에도 구현의 편리성 때문에 BFS 대신에 사용하는 경우 또한 많다
 */

/*** 깊이 우선 탐색(DFS) 사용 예시
 * 깊이 우선 탐색이 사용되는 예시로는 다음과 같은 상황들이 있다.
 * 1. 더 짧은 코드로 간결히 구현해야 하는 경우
 * 2. 큐 라이브러리를 사용할 수 없는 경우
 * 3. 트리의 순회, 점화식 구현 등 DFS(재귀 구조)에 특화된 문제인 경우
 * 4. 트리에서 최단 거리 탐색을 구하는 경우
 * -> 트리에서는 두 노드를 잇는 경로가 하나만 존재한다.
 */
