/**
 * 한 개의 회의실이 있는데,
 * 이를 사용하고자 하는 n개의 회의들에 대하여 회의실 사용표를 만들려고 한다.
 *
 * 각 회의에 대해 시작시간과 끝나는 시간이 주어져 있고,
 * 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 최대수의 회의를 찾아라.
 * 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있음
 *
 * cf. 회의의 시작시간과 끝나는 시간의 조건은 (시작시간 <= 끝나는 시간)
 *
 * @param {*} meeting : 회의 시간이 적힌 2차원 배열
 * @returns 겹치지 않게 회의실을 사용하는 최대 수
 */
function solution(meeting) {
  let answer = 0;

  // 끝나는시간 기준으로 오름차순
  meeting.sort((a, b) => {
    // 끝나는 시간이 같으면, 시작 시간을 기준으로 오름차순
    if (a[1] === b[1]) return a[0] - b[0];
    // 아니면 끝나는 시간으로 오름차순
    else return a[1] - b[1];
  });

  let entTime = 0; // 첫 번쨰 회의는 무조건 시작할 수 있도록

  for (let meetingTime of meeting) {
    // 시작시간이 끝나는 시간보다 크면,
    if (meetingTime[0] >= entTime) {
      answer++;
      entTime = meetingTime[1]; // endTime이 끝나는 시간 넣기
    }
  }
  return answer;
}

console.log(
  solution([
    // [시작시간, 끝나는시간]
    [1, 4],
    [2, 3],
    [3, 5],
    [4, 6],
    [5, 7],
  ])
); // 3 | (2, 3), (3, 5), (5, 7)이 회의실 이용 가능

console.log(
  solution([
    [3, 3],
    [1, 3],
    [2, 3],
  ])
); // 2 | 끝나는 타임이 다 같으면, 시작시간으로 오름차순 (시작시간과 끝나는 시간이 다 같은 경우)
